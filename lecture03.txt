=============================================LECTURE 03=============================================
====================================================================================================

====================================================================================================
Basic Types

bool
--------------
char
signed char
unsigned char
--------------
short
unsigned short
--------------
int
unsigned int
--------------
long
unsigned long
--------------
long long
unsigned long long

sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)
--------------
float        (4 bytes)
double        (8 bytes)
long double

4.5  means double
4.5F means float

Types                   Suffix
unsigned                U
long                    L
float                   F    (has to contain . , e.g. 34F is a syntax error, correct way is 34.F)
unsigned long           UL  or LU
unsigned long long      ULL or LLU

##REMARK##
    - When signed or unsigned used without any type keywords like signed x or unsigned x, it
        automatically becomes signed int x or unsigned int x.
    - Using scientific notation in real numbers eliminates the necessity of ".".
        e.g.
            10e2, 10e2F
    - If you exceed the value limits of int or float, variable type automatically changes to the
        respective bigger types, depending on which type can contain that value.
    - To make reading large numbers easier, ' (digit separator) can be used.
        e.g.
            int x = 784'123; would mean int x = 784123; but it is much easier to read the number.
            This is not exclusive to decimals.
##REMARK##

---------------------------------------------
C                   C++
Decimal             Decimal         41        (default)
Octal               Octal           041
Hexadecimal         Hexadecimal     0x41
                    Binary          0b1001
---------------------------------------------

Default type of variables are int.
    e.g.
        ival * 1000  int operation
        ival * 1000L long operation (typecasting)

Variable types are critically important for function overloading.

====================================================================================================
Scope
    Names have scope.
    in C
        Block Scope
        File Scope
        Function Prototype Scope
        Function Scope

    in C++
        Block Scope
        Namespace Scope
        Class Scope
        Function Prototype Scope
        Function Scope

Name Lookup

====================================================================================================
Expression
    Most widely used statement form is expression statement.

        Expression Statement
            If you put a ';' at the end of an expression it becomes an expression statement.
                e.g.
                    x = 5;

    Every expression has a data type(int, double, ...) and
    a value category(PR, X, L(primary val cats) or R, GL(secondary val cats)).
    ###REMARK###
        Priority operator does not change the value category.
            e.g.
                x = 9;

                and

                (((((((((x))))))))) = 9;

                are the same thing.
    ###REMARK###

====================================================================================================
constexpr
    ###REMARK###
        constant(const) and constant expression(constexpr) are different from each other
    ###REMARK###

    C definition: if the value of an expression is known by the compiler at the compile time that
    expression is a constant expression(constexpr).

    In C there are some places that constexpr must be used;
        e.g.
            - int a[constexpr] because compiler has to know the size of the array(if compiler does
                not support variable length array).
            - Initializations of global variables.
            - Case label expressions in switch.
            - Bitfield member

    In C++ importance of constepxr is much greater than in C.

====================================================================================================
Operators
    By Operand(s)
        Unary
        Binary
        Ternary    (the ternary/conditional operator)
    By Position
        Prefix        *ptr or ++x or --x etc.
        Postfix        x++ or x-- etc.
        Infix        a + b or a * b etc.

    Operator Precedence
    ------------------------------------------------------------------------------------------------
    1   [] Subscript(Index Operator)    () Function Call Operator
        .(Dot Operator) and ->(Arrow Operator) are member selection operators
    ------------------------------------------------------------------------------------------------
    2   ++(Increment Operator)          --(Decrement Operator)      !(Logical not Operator)         
        ~(Bitwise not Operator)         &(Address Operator)         *(Dereferencing Operator)
        +(Sign Operator)                -(Sign Operator)            (type)(Typecasting Operator)
        sizeof operator

        ###REMARK###
            - sizeof is a keyword and is an operator, not a function.
            - sizeof is a compile time operator, which means expressions generated by sizeof are
                constexpr, so they can be used in array declarations.
            - sizeof type of expressions generated by sizeof is size_t(is an unsigned int).
            - sizeof usage of () is necessary only when using type name as its operand.
                e.g.
                     sizeof(int);
                     sizeof(double);
            - sizeof operand of sizeof operator is unevaluated context.
        ###REMARK###
    ------------------------------------------------------------------------------------------------
    3   *(Multiplication Operator)      /(Division Operator)        %(Modulus Operator)
    ------------------------------------------------------------------------------------------------
    4   +(Addition Operator)            -(Subtraction Operator)
    ------------------------------------------------------------------------------------------------
    5   >>(Bitwise Right Shift)         <<(Bitwise Left Shift)

        ###REMARK###
            Right operand of bit shift operators must be smaller than the number of bits of its left
            operand, also must be a positive value.
        ###REMARK###
    ------------------------------------------------------------------------------------------------
    6   >(Greater Than)                 <(Less Than)
        >=(Greater Than or Equal To)    <=(Less Than or Equal To)
    ------------------------------------------------------------------------------------------------
    7   ==                              !=
    ------------------------------------------------------------------------------------------------
    8   &(Bitwise and)
    ------------------------------------------------------------------------------------------------
    9   ^(Bitwise xor)
    ------------------------------------------------------------------------------------------------
    10  |(Bitwise or)
    ------------------------------------------------------------------------------------------------
    11  &&(Logical and)
    ------------------------------------------------------------------------------------------------
    12  ||(Logical and)
    ------------------------------------------------------------------------------------------------
    13  ?:(Ternary Operator)
            e.g.
                assignment
                    z = x > y ? a : b;
                function(a > b ? a : b)
                return statements
                    return x > 10 ? x : b;
    ------------------------------------------------------------------------------------------------
    14  =    +=    -=    *=    /=    %=    &=    ^=    |=        (Compound Operators)
    ------------------------------------------------------------------------------------------------
    15  ,(Comma Operator)   is a binary operator that evaluates its first operand and discards the
                            result, it then evaluates the second operand and returns this value
                            (and type).

            int num1 = (5, 10);         // 10 is assigned to num
            int num2 = (f1(), f2());    // f1() is called(evaluated) first followed by f2(). The
                                        // returned value of f2() is assigned to num2.
        ###REMARK###
            Separator comma and operator comma are different from each other.
        ###REMARK###
    ------------------------------------------------------------------------------------------------

###REMARK###
    Short Circuit Behavior;
        && if the left operand is false, right operand is not calculated.
        || if the left operand is true,  right operand is not calculated.
###REMARK###

Yielded value, generated value, return value are the same thing.

Postfix and prefix values have side effects, they change the value of their operand.
    e.g.
        int x = 10;
        int y = x++;    // In this, y will be 10, and x will be increased to 11.

        int x = 10;
        int y = ++x;    // In this, y will be 11, and x will be increased to 11.
                
                        // In both examples x has the value 11 because of the side effect but, in
                        // the first it happens after they is initialized.
###REMARK###
    Return value of every assignment operator is the value that is assigned to the variable.
###REMARK###


====================================================================================================
Sequence Point(also called sequencing in C++)
    Expressions causing a side effect before this point, must be completed after this point
        i.e.
            x = 10;
            x++;
            //-------------sequence point
            x;                              // x is 11 from here
        e.g. for sequence points
            int x = 5, y = ++x, z = y + x;  // Comma separator creates a sequence point, therefore
                                            // at the end of this line x is 6, y is 6, z is 12.
                                            // Expression in if, switch, while, do-while and
                                            // semicolons in for are sequence points. Left hand
                                            // operand of && operator is a sequence point.

====================================================================================================
Order of Evaluation
    f1() + f2() * 5
        f1 will be evaluated first, then f2, then multiplication and finally addition.

###REMARK###
    Token
        e.g.
            Identifier
            Operator
            String Literal
                e.g.
                    "mike"
            Keywords
###REMARK###

###REMARK###
    sizeof
        1-) sizeof is an operator not a function.
        2-) Expressions generated by sizeof are constantexpressions(that means they are compile time
            constants).
        3-) Value generated by sizeof has the value type size_t(it can be unsigned int,
            unsigned long, unsigned long long).
        4-) Paranthesis used in sizeof are not part of the operator, they are only necessary when
            the operand of sizeof is a typename.
        5-) Operand of sizeof is unevaluated context.
###REMARK###

###REMARK###
    Bitshift Operators
        1-) Value of the right operand of bitshift operators must be smaller than the number of bits
            of the left operand.
        2-) Value of the right operand must be non-negative.
        3-) Left operand will be promoted.
        4-) Left operand must be positive(in C).
        5-) Whether it's an arithmetic bitshift or logic bitshift is implementation defined(meaning
            it depends on the compiler).
###REMARK###

###REMARK###
    Do not compare two real numbers.
###REMARK###

##QUESTION##
    #include <stdio.h>
        
    int main(void)
    {
        int x = 10, y = 20;
        int z;

        z = x, y;
        printf("z = %zu\n", z);                // This will output         z = 10

        z = (x, y);
        printf("z = %zu\n", z);                // This will output         z = 20
        
        return 0;
    }
##QUESTION##
====================================================================================================
