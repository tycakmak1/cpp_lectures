=============================================LECTURE 12=============================================
====================================================================================================

Default ctor that has been defaulted by the compiler is the;
    - Non-Static
    - Public
    - Inline
    function of the class.

###REMARK###
    If defaulting of a special member function by a compiler breaks a rule of the language, then
    instead of a syntax error, compiler deletes that function.

    Why would there be a syntax error?
        - A member is unable to default initialize.
        - Calling of a non-existing function.
        - Calling of a private function.
        - Calling of a deleted function.
        e.g.
            class MyClass
            {
            public:

            private:
                const int _x;
            }; // class MyClass
            Here default ctor is deleted, because const int cannot be default initialized.
            Note that, this class definition is not a syntax error but, creating an instance of
            MyClass with default initialization would cause a syntax error, because MyClass does not
            have a default ctor.
        e.g.
            class Tah
            {
                Tah();
            }; // class Tah
            class MyClass
            {
                Tah _tah;
            }; // class MyClass
            int main()
            {
                MyClass m1;
                return 0;
            }
            Here default ctor of Tah is private, so default initializing of a Tah instance would
            cause a syntax error.
###REMARK###

====================================================================================================
Copy Ctor
    When a class instance initiated with the value of another instance of the same class, copy
    constructor is called.
        e.g.
            Student mike;               // Calls default constructor.
            Student taha{mike};         // Calls copy constructor.
            Student yasin(mike);        // Calls copy constructor.
            Student cakmak = mike;      // Calls copy constructor.

    Default copy ctor that defaulted by the compiler is the
        - Non-Static
        - Public
        - Inline
        function of the class.

    ###REMARK###
        If the special member function that's been defined by the compiler is working for you, let
        the compiler define it. This is called rule of zero.

        So when should we write the copy ctor?
            When the class has a pointer/reference variable in it. Because copy ctor copies the
            values of the members, so copying the value of a pointer/reference results with that
            pointer/reference member having the same value with the original instance. So they point
            to the same thing, and when changing values in that location, they both get changed.
            This type of copying called shallow/memberwise copy. Instead of this we do deep copy,
            which is creating a new instance and copying the values from the original instance.
                e.g.
                    class String
                    {
                    public:
                        String() = default;

                        String(char const* p)
                        : _len{std::strlen(p)}, _p{static_cast<char*>(std::malloc(_len + 1))}
                        {
                            if (!_p)
                            {
                                throw std::runtime_error{"cannot allocate memory"};
                            }
                            std::strcpy(_p, p);
                        }

                        String(String const& other)
                        : _len{other._len}, _p{static_cast<char*>(std::malloc(_len + 1))}
                        {
                            if (!_p)
                            {
                                throw std::runtime_error{"cannot allocate memory"};
                            }
                            std::strcpy(_p, other._p);
                        }

                        String& operator=(String const& other)
                        {
                            if (this == &other)     // Removal of this control mechanism, creates a
                                                    // dangling handle problem caused by self
                            {                       // assignment. There is an alternative to this,
                                return *this;       // Copy & Swap Idiom, a topic for later.
                            }
                            std::free(_p);
                            _len = other._len;
                            _p     = static_cast<char*>(std::malloc(_len + 1));
                            if (!_p)
                            {
                                throw std::runtime_error{"cannot allocate memory"};
                            }
                            std::strcpy(_p, other._p);
                            return *this;
                        }

                        ~String() {std::free(_p);}

                        void print() const { std::cout << "[" << _p << "]\n"; }

                        std::size_t length() const { return _len; }

                    private:
                        std::size_t _len{};
                        char* _p{};
                    }; // class String
                    void func(String s)
                    {
                        std::cout << "func called\n";
                        s.print();
                    }

                    int main()
                    {
                        String str{"hello world!"};

                        str.print();
                        auto len = str.length();

                        std::cout << "len = " << len << '\n';

                        func(str);
                        std::cout << "back to main\n";
                        str.print();
                        std::cout << str.length();
                    }
            So, deep copy is necessary when a class contains a handle(pointer or reference).
            There are classes that have pointers in them but, for those classes deep copy ctor
            is not necessary to be defined explicitly, because those classes already have built-in
            deep copy ctor.
    ###REMARK###

    Three status for copy ctor;
        1-) Compiler Defined(Rule of Zero)
        2-) Explicitly Defined
        3-) Deleted(This is done to prevent copying)

    When defining an explicit dtor, instead of letting the compiler define a copy ctor,
    there should also be an explicit copy ctor.

    In old C++, these three functions were related to each other,
        - Destructor
        - Copy Ctor
        - Copy Assignment
    That's why these three were usually called Big 3. In modern C++, with the addition of move
    members,
    they are referred to as Big 5.
    The reason it is called as is, if you define one of them then you should also define the others.

====================================================================================================
Copy Assignment
    Unlike copy ctor, in copy assignment, there are no instances being created. It works on already
    existing instances.
        e.g.
            class MyClass
            {
            public:
                MyClass() = default;                        // Default Constructor
                MyClass operator=(MyClass const& other)     // Copy    Assignment
                {
                    _x = other._x;
                    _y = other._y;

                    return *this;
                }
            private:
                int _x, _y;
            }; // class MyClass
            MyClass x{};
            MyClass y{};

            y = x;                                          // Copy Assignment

    It must be named as operator=.

    If copy assignment operator is implicitly defined by the compiler, then it is
        - Non-Static
        - Public
        - Inline
        function of the class.

    ###REMARK###
        Self Assignment
            e.g.
                int main()
                {
                    int x = 10;
                    x = x;                                  // Self Assignment

                    return 0;
                }
            To prevent this assignment can be checked for sel assigning.
                e.g.
                    T operator=(T const& other)
                    {
                        if(this == &other)                  // Self Assignment control
                        {
                            return *this;
                        }
                        //.. Copy operations
                        //.. Copy operations
                        //.. Copy operations
                        return *this;
                    }
    ###REMARK###

====================================================================================================
Move Members
    class MyClass
    {
    public:
        MyClass();                              // Default Ctor
        ~MyClass();                             // Destructor

        MyClass(MyClass const&);                // Copy Ctor
        MyClass(MyClass&&);                     // Move Ctor

        Myclass& operator=(MyClass const&);     // Copy Assignment
        Myclass& operator=(MyClass&&);          // Move Assignment
    }; // class MyClass
====================================================================================================
