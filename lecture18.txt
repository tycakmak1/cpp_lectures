=============================================LECTURE 18=============================================
====================================================================================================

====================================================================================================
Nested Types(Continued)
    ###REMARK###
        Member functions of a nested type can be defined inside of the class declaration, or can be
        declared in the class declaration and defined outside of the enclosing class. Notice the
        detail "enclosing class" in the previous sentence.
            e.g.
                class MyClass
                {
                    class Nested
                    {
                        void foo();                     // VALID
                        void bar();                     // VALID
                    }; // class Nested

                    void Nested::bar() { return; }      // INVALID

                }; // class MyClass
                void MyClass::Nested::foo() { return; } // VALID
    ###REMARK###

    ================================================================================================
    Pimple Idiom
        - Also called Handle Body Idiom, Cheshire Cat Idiom, Opaque Pointer Idiom.
        - It aims to minimize the dependency between modules. It is achieved by hiding the private
            members of the class. Since size of pointers to all types of variables are the same
            binary compatibility is still intact.
            e.g.
                #include "Date.h"
                class MyClass
                {
                private:
                    std::string _str;
                    Date _date;
                }; // class Myclass
                Since we are using a Date object in MyClass, compiler must be able to see the
                definition of Date type. This means everytime Date.h or Date.cpp gets changed,
                MyClass header and implementation files must also be compiled again. To avoid this
                pimple idiom is used. Instead of this we do this,
                    // MyClass.h
                        class MyClass
                        {
                            void foo();
                        private:
                            class Pimple;
                            Pimple* _p;
                        }; // class MyClass

                    // MyClass.cpp
                        #include <string>
                        #include "MyClass.h"
                        #include "Date.h"
                        class MyClass::Pimple
                        {
                            friend void MyClass::foo();
                            std::string _str;
                            Date _date;
                        }; // class MyClass::Pimple

                        void MyClass::foo()
                        {
                            pimple->_str;   // Since _str and _date are private members of
                            pimple->_date;  // MyClass::Pimple this is how they can be accessed.
                        }

                    Alternatively same functions can be re-declared inside Pimple and can be used
                    directly.
                        e.g.
                            // MyClass.h
                                class MyClass
                                {
                                    void foo();
                                private:
                                    class Pimple;
                                    Pimple* _p;
                                }; // class MyClass

                            // MyClass.cpp
                                #include <string>
                                #include "MyClass.h"
                                #include "Date.h"
                                class MyClass::Pimple
                                {
                                public:
                                    void foo()
                                    {
                                        _str = "Hello World!\n";
                                        _date = Date{22, 10, 2023};
                                    }
                                private:
                                    std::string _str;
                                    Date _date;
                                }; // class MyClass:Pimple

                                void MyClass::foo()
                                {
                                    _p->foo();
                                }
                            This way there are less derefences.
        - For Pimple Idiom to be used, constructor of the enclosing type must initialize the
            pointer. Also the destructor of enclosing type must also delete the pimple object.
                e.g.
                    // MyClass.h
                    #include "Date.h"
                    class MyClass
                    {
                        MyClass();
                        ~MyClass();
                        class Pimple;
                        Pimple* _p;
                    }; // class MyClass

                    // MyClass.cpp
                    #include "MyClass.h"
                    class MyClass::Pimple
                    {
                    public:
                        Pimple();
                    private:
                        std::string _str;
                        Date _date;
                    }; // class MyClass::Pimpla

                    MyClass::MyClass() : _p{new Pimple} {}
                    MyClass::~MyClass() { delete _p; }

                    MyClass::Pimple::Pimple() : _str{"Hello World!"}, _date{23, 10, 2023} {}


====================================================================================================
Composition
    A class having other class or classess as it's member or members. Broadly speaking, object
    composition models a "has-a" relationship between two objects, e.g. a car "has-a" transmission.
    ###REMARK###
        Public interface of the member class is not part of the enclosing class.
            e.g.
                class Member
                {
                public:
                    void foo() {}
                    void bar() {}
                }; // class Member

                class Owner
                {
                private:
                    Member _x;
                }; // class Owner

                int main()
                {
                    Owner a;
                    // a.foo();        // syntax error
                    // a.bar();        // syntax error
                }
            BUT
                member functions of owner class can use it's members to acces their own public
                interfaces.
                    e.g.
                        class Member
                        {
                            int _ival;
                            void baz();
                        public:
                            void foo() {}
                            void bar() {}
                        }; // class Member

                        class Owner
                        {
                        public:
                            void func()
                            {
                                _x.foo();       // VALID
                                _x.bar();       // VALID
                                _x._ival;       // INVALID
                                _x.baz();       // INVALID
                            }
                        private:
                            Member _x;
                        }; // class Owner

                        int main()
                        {
                            Owner a;
                            // a.foo();         // still a syntax error
                            // a.bar();         // still a syntax error
                        }
                ###REMARK###
                    - Members of a class instance is created before the constructors block.
                    - If the default ctor of a class is defaulted(defined by the compiler) then the
                        data members will be default initialized.
                    - If the copy ctor of a class does not initialize all members, compiler will
                        call the default ctor for the missing members, which is dangerous.
                            e.g.
                                class Member
                                {
                                public:
                                    Member()
                                    {
                                        std::cout << "Member default ctor\n";
                                    }

                                    Member(Member const&)
                                    {
                                        std::cout << "Member copy ctor\n";
                                    }
                                }; // class Member

                                class A
                                {
                                public:
                                    A() = default;
                                    A(A const&) {}
                                private:
                                    Member _x;
                                }; // class A

                                class B
                                {
                                    Member _x;
                                }; // class B

                                int main()
                                {
                                    A a1;
                                    A a2{a1};   // Since _x is not properly initialized in copy
                                                // ctor, compiler will call the default ctor for it.
                                    B b1;
                                    B b2{b1};   // Here default ctor will not be called.
                                }

                                Will have the following output because of copy ctor.
                                    Member default ctor
                                    Member default ctor
                                    Member default ctor
                                    Member copy ctor
                ###REMARK###
    ###REMARK###
====================================================================================================
