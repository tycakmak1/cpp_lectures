=============================================LECTURE 06=============================================
====================================================================================================

====================================================================================================
Universal Reference(Forwarding Reference)(auto&& name = expression)
    If rhs is L val. exp then, auto = T&.
    If rhs is R val. exp then, auto = T.
        e.g.
            int x = 10;
            auto&& r1 = x;          // Here compiler reads this line as if it was int& && r1 = x,
                                    // so auto = int&. reference collapsing.
            auto&& r2 = 10;         // Here compiler reads this line as if it was int&& r2 = 10,
                                    // so auto = int.


====================================================================================================
Decltype(x)
    auto can only be used in variable declarations, but declytype can be used anywhere to specify a
    type.

    Works in two different ways;
        1-)    If the operand is an identifier, it gives out the type of the operand.
                e.g.
                    int x = 5;
                    decltpye(x) y = 10;             // Here compiler reads this line as if it was
                                                    // int y = 10, decltype(x) = int.

                    or

                    int x = 5;
                    using mytype = decltype(x);     // Here compiler reads this line as if it was
                                                    // using mytype = int, so decltype(x) = int.

                    or

                    struct Data
                    {
                        int a, b, c;
                    };
                    Data d;
                    Data* pd = &d;
                    decltype(d.a) x;                // Here compiler reads this line as if it was
                                                    // int x, so decltype(d.a) = int.
                    decltype(pd->a) y;              // Here compiler reads this line as if it was
                                                    // int y, so decltype(d->a) = int.

        2-)    If the operand is an expression,
            2.1-) If it's a  PR val. expr. then T.
            2.2-) If it's an L  val. expr. then T&.
            2.3-) If it's an X  val. expr. then T&&.
            e.g.
                int x = 5;
                decltype(x++) y;                    // Here compiler reads this line as if it was
                                                    // int y, so decltype(x++) = int.
                decltype(++x) z;                    // Here compiler reads this line as if it was
                                                    // int& z, so decltype(++x) = int&.
                                                    // Which would be a syntax error because
                                                    // references must be initialized.

                or

                int x = 5;
                int* ptr = &x;
                decltype(*ptr) r = x;               // Here compiler reads this line as if it was
                                                    // int& r, so decltype(*ptr) = int&.

                or

                int f1();
                int& f2();
                int&& f3();

                int main()
                {
                    f1();                   // PR value
                    f2();                   // L  value
                    f3();                   // X  value

                    decltype(f1()) x = 5;   // Here compiler reads this line as if it was int   x,
                                            // so decltype(f1()) = int.
                    decltype(f2()) y = x;   // Here compiler reads this line as if it was int&  y, 
                                            // so decltype(f2()) = int&.
                    decltype(f3()) z = 5;   // Here compiler reads this line as if it was int&& z, 
                                            // so decltype(f3()) = int&&.
                    return 0;
                }

        e.g. for both ways
            int a[5]{};
            decltype(a) b;                  // Here a is an identifier, so decltype(a) = int[5].
            decltype(a[0]) c = a[1];        // Here a[0] is an L val. expr.,
                                            // so decltype(a[0]) = int&.

        ###REMARK###
            int x;
            decltype(x) a;                  // Here x is an identifier, so decltype(x) = int.
            decltype((x)) b;                // Here (x) is an L val. expre.,
                                            // so decltype((x)) = int&.
        ###REMARK###

    ###REMARK###
        Operand of the decltype is unevaluated context. operand of the sizeof is also unevaluated.
            e.g.
                int x = 10;
                decltype(x++) y = 5;
                decltype(++x) z = y;
                int main()
                {
                    std::cout << x << "\n"; // Outputs 10, because operand of declytpe is
                    return 0;               // unevaluated.
                }
    ###REMARK###

    ###REMARK###
        In auto top level const is lost, but in decltype it is not.
            e.g.
                int const x{};
                decltype(x) y = 10;         // Here compiler reads this line as if it was
                                            // int const y = 10, so decltype(x) = int const.
    ###REMARK###

====================================================================================================
Default Arguments of Functions
    Parameter (Formal Parameter)
    Argument  (Actual Parameter)

    ###REMARK###
        int foo(int x);                     // Here x is a parameter of the function foo.
        foo(5);                             // Here 5 is the argument.
    ###REMARK###

    int func(int, int, int = 10);

    func(x, y, z);                          // func(x, y, z);
    func(x, y);                             // func(x, y, 10);

    ###REMARK###
        int func(int, int = 5, int);        // Syntax error. Every following argument after a
                                            // default argument, must also have a default argument.

        but there is an exception to this
            int func(int, int, int = 10);
            int func(int, int = 5, int);    // Since the 3rd parameter already has a default value,
                                            // redeclaring it as int func(int, int = 5, int = 10)
                                            // would be a syntax error. So calling func as func(1)
                                            // would mean func(1, 5, 10).
    ###REMARK###

    Default argument does not have to be a constant expression.
        e.g.
            int f1(int x = 0);
            void f2(int y = f1());
            f2();                            // f2(f1()) ==> f2(f1(0))

    ###REMARK###
        Declaration of default arguments both in the function declaration and in the function
        definition causes syntax error.
            e.g.
                int func(int x = 5);
                int func(int x = 5)
                {
                    // code
                    return x;
                }
                // this is a syntax error

                BUT
                
                int func(int x);
                int func(int x = 5)
                {
                    // code
                    return x;
                }
                // this is well-formed

                or

                int func(int x = 5);
                int func(int x)
                {
                    // code
                    return x;
                }
                // this is also well-formed
    ###REMARK###

    ###REMARK###
        int func(int, int, int = 10);
        int func(int, int, int = 10);           // Is a syntax error because it's a redefinition.

        or

        int func(int, int, int = 10);
        int func(int, int = 5, int = 10);       // Is a syntax error because it's a redefinition.

        BUT

        int func(int, int, int = 10);
        int func(int, int = 5, int);            // Is well-formed.

        These two styles are especially useful if you are using a function from a header file that
        does not belong to you. Instead of changing the function in the header file, you can
        redeclare it in your own program.

        void func(int x, int y = x);            // Is a syntax error.
    ###REMARK###

====================================================================================================
Enumerators
    There are two different enum types in C++ enum and scoped enum(usually called enum class by
    developers but correct name is scoped enum).

    ================================================================================================
    Old Enum
        e.g.
            enum Color
            {
                red,
                green,
                blue
            }; // enum Color

            or

            enum Color : unsigned char
            {
                red,
                green,
                blue
            }; // enum Color

            - Underlying type is determined by the compiler. In C, underlying type has to be
                int. In C++ it is dependent on int, it defaults to int but if int is not enough
                then it is chosen accordingly by the compiler. Can also be specified explicitly
                in C++.
                    e.g.
                        enum Color : unsigned char;

                        or

                        enum Color : unsigned int
                        {
                            gray,
                            black,
                            magenta
                        }; // enum Color

        ============================================================================================
        Problems of the Old Enum
            - Old enum cannot be used as an incomplete type, because underlying_type is dependent on
                the compiler.
            - Underlying type cannot be specified by developer.
            - Implicit type casting from arithmetic types to enum type does not exist but it does
                from enum to arithmetic types. THIS IS A HUGE PROBLEM. ONE OF THE MAIN REASONS THAT
                SCOPED ENUM EXISTS.
            - Implicit type casting between two different enum's also does not exist.
            - THEY DO NOT HAVE SCOPE. ONE OF THE MAIN REASONS THAT SCOPED ENUM EXISTS. When defined
                globally, components of different enum's with same names would clash(called name
                clashing / name masking / name hiding).
                    e.g.
                        enum traffic_light
                        {
                            red,
                            yellow,
                            green
                        };
                        enum screen_color
                        {
                            gray,
                            white,
                            red
                        };
                        To prevent name clashing developers would define the components more
                        uniquely.
                            e.g.
                                enum traffic_ligt
                                {
                                    traffic_light_red,
                                    traffic_light_yellow,
                                    traffic_light_green
                                };
                                enum screen_color
                                {
                                    screen_color_gray,
                                    screen_color_white,
                                    screen_color_yellow
                                };
                                If not done like this, red in traffic_light and red in
                                screen_color would clash.    

    ================================================================================================
    Scoped Enum
        e.g.
            enum class Color
            {
                white,
                gray,
                black,
                green
            }; // enum class Color

            or

            enum class Color : unsigned char
            {
                white,
                gray,
                black,
                green
            }; // enum class Color

        - It's underlying type defaults to int, but can be specified by declaration or definition.
        - To access it's elements, scope resolution operator(::) must be used.
            e.g.
                Color temp = white;             // Is a syntax error because white is not defined.
                Color temp = Color::white;      // Is the proper way.
                auto c1 = gray;                 // Is still a syntax error, same reason.
                auto c1 = Color::gray;          // Is the proper way.

                This prevents the name clashing problems, which was the aim.

        - Implicit type casting from scoped enum to arithmetic type does not exist. explicit does.
            e.g.
                enum class Color
                {
                    red,
                    green,
                    blue
                }; // enum class Color
                Color mycolor{Color::red};
                int x = mycolor;                    // Is a syntax error because implicit type
                                                    // casting does not exist for scoped enums.
                int x = static_cast<int>(mycolor);  // Is correct, because type cast is done
                                                    // explicitly.

        ###REMARK###
            Using enum declaration can grant access to the elements of a scoped enum without scope
            resolution operator. This is available with C++20.
                e.g.
                    enum class Color
                    {
                        red,
                        green.
                        blue
                    }; // enum class Color
                    using enum Color;       // By using this, in the scope of this declaration,
                                            // you can access the elements of Color without using
                                            // scope resolution operator.
                    auto c1 = red;
                    Color c2 = green;

                ###REMARK###
                    If you use two "using enum" declarations in the same scope, you would create an
                    error if those two scoped enums have a name clash. Compiler checks this on the
                    compile time.
                ###REMARK###
                    Can also be used like this
                        enum class Color
                        {
                            red,
                            green,
                            blue
                        }; // enum class Color
                        using Color::red;
                        Color c1 = red;     // Is valid because of the "using Color::red".
                        Color c2 = blue;    // Is invalid because blue is undefined in this scope.
                                            // It has to be Color c2 = Color::blue.

                        BUT

                        using Color::red, Color::blue;
                        Color c1 = red;     // Is valid because of the "using Color::red".
                        Color c2 = blue;    // Is valid because of the "using Color::blue".
        ###REMARK###
====================================================================================================
