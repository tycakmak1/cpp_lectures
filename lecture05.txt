=============================================LECTURE 05=============================================
====================================================================================================

====================================================================================================
Reference Semantics

    On language level, reference and pointer are the same thing, only difference is on the syntax
    level.

    1-) L Value Reference
    2-) R Value Reference
            used for
                - Move Semantics
                - Perfect Forwarding(is a tool related to generic programming)
    3-) Forwarding Reference (Universal Reference)


    How to use reference and pointer on arrays?
        int a[5]{0, 1, 2, 3, 4};
        int& r1 = a[0];         // Here r1 is a reference to the first element of a.
        int (&r2)[5] = a;       // Here r2 is a reference to the array itself.
        same goes for pointers
        int* p1 = a;            // Here p1 points to the first element of a.
        int (*p2)[5] = &a       // Here p2 points to the array itself.

    ###REMARK###
        int a = 5;
        int& r_a = a;           // Data type of r_a is int& but the type of expression "r_a" is int.
    ###REMARK###

    Why Do We Use L Value Reference?
        For the %99 of the time
            - To pass an object to a function as call by reference
            - bir fonksiyonun kendisini �a��ran koda bir nesnenin kendisini g�ndermesi

    ###REMARK###
        int* g;
        int* foo()
        {
            return g;
        }

        int main()
        {
            int*& r = foo();    // This is a syntax error because foo() is an R value expression.
            return 0;
        }
    ###REMARK###

    ###REMARK###
        Returning the address of an automatic lifetime variable is an undefined behaviour.
    ###REMARK###

    void func(T* x);            // setter-mutator
    void func(T const* x);      // getter-accessor

    ###REMARK###
        int x = 10;
        int& r1 = x;            // VALID
        int& r2 = 5;            // INVALID  Here r2 is bound to a temporary object generated by the
                                //          compiler.
        int&& r3 = x;           // INVALID
        int&& r4 = 5;           // VALID
        int const& r5 = 10;     // VALID    Here r5 is bound to a temporary object generated by the
                                //          compiler.
        int const&& r6 = x;     // VALID    But in practice int const&& is not a tool used or is it
                                //          INVALID?
        double& r7 = x;         // INVALID
        double const& r8 = x;   // VALID    Here r8 is bound to a temporary object generated by the
                                //          compiler.
    ###REMARK###


                POINTERS                                REFERENCES
        Default initialization is possible      Default initialization is not possible
        Dointer to pointer exists               Reference to reference does not exist(there is
                                                reference collapsing)
        Array with pointer elements exists      Array with reference elements does not exist
        Pointer to function exists              Reference to function exists
        Can be nullptr                          No null reference
        Can point to a different object         Cannot be bound to a different object
                                                (std::reference_wrapper allows this)

    ###REMARK###
        int& r1;                // L value reference
        int&& r2;               // R value reference
    ###REMARK###

====================================================================================================
Type Deduction

    There are four different type deductions mechanisms;
        1-) auto
        2-) decltype()
        3-) decltype(auto)
        4-) template

    ###REMARK###
        Type deduction happens in compile time, it has nothing to do with run time.
    ###REMARK###

    ================================================================================================
    auto Type Deduction
        - Variables defined with auto keyword must be initialized.
        - Type deduction happens for auto keyword, not the type of variable. Meaning compiler
            determines what's written instead of auto keyword.
            e.g.
                auto x = 5;         // Here compiler reads this line as if it was int x = 5,
                                    // so auto = int.
                auto p1 = &x;       // Here compiler reads this line as if it was int* p = &x,
                                    // so auto = int*.
                auto* p2 = &x;      // Here compiler reads this line as if it was int* p2 = &x,
                                    // so auto = int.

                int const y = 5;
                auto x2 = y;        // Here const is lost, so compiler reads this line as if it was
                                    // int x2 = y. To keep the const it must be changed to
                                    // auto const x2 = y.

                int x = 10;
                int& r = x;
                auto y = r;         // Here & is lost, so the compiler reads this line as if it was
                                    // int y = r not int& y = r.
        ###REMARK###
            If pointers are used in auto initializations, low level const is not lost.
                e.g.
                    int const x[] = {0, 1, 2, 3, 4};
                    auto y = x;         // Here compiler reads this line as if it was
                                        // int const* y = x, so auto = int const*.
                    
                    or
                    
                    int const x = 5;
                    auto y = &x;        // Here compiler reads this line as if it was
                                        // int const * y = &x, so auto = int const*.
                    
                    or
                    
                    int const x = 5;
                    auto* y = &x;       // Here compiler reads this line as if it was
                                        // int const* y = &x, so auto = int const.
                    
                    or
                    
                    int const x = 5;
                    auto& y = x;        // Here compiler reads this line as if it was
                                        // int cosnt& y = x, so auto = int const.
                    
                    or
                    
                    int const x[5]{};
                    auto y = &x;        // Here compiler reads this line as if it was
                                        // int const(*y)[5] = &x, so auto = int const(*)[5].
                    
                    or
                    
                    int const x[5]{};
                    auto& y = x;        // Here compiler reads this line as if it
                                        // was int const(&y)[5] = x, so auto = int const[5].
                    
                    or
                    
                    auto& y = "michael";// Here compiler reads this line as if it was
                                        // char const(&y)[8] = "michael", so auto = char const[8].
                    
                    All in these examples, y is a const.
            BUT
                Top level const is lost.
                    e.g.
                        int* const ptr{};
                        auto p = ptr;   // Here compiler reads this line as if it was
                                        // int* p = ptr, so auto = int*.
        ###REMARK###
        - Can also be for function pointers.
            e.g.
                int foo(int);

                int main()
                {
                    auto x1 = foo();    // Here compiler reads this line as if it was
                                        // int(*x1)(int) = foo, so auto = int(*)(int).
                    auto x2 = foo();    // Exactly same with the line above.
                    auto x3 = &x1;      // Here compiler reads this line as if it was
                                        // int(**x3)(int) = foo, so auto = int(**)(int).
                    return 0;
                }

        ============================================================================================
        Reference Collapsing
            T&          &         T&
            T&          &&        T&
            T&&         &         T&
            T&&         &&        T&&
                e.g
                    using lref = int&;
                    using rref = int&&;
                    int x = 10;
                    auto&& p = x;   // Here compiler reads this line as if it was int& && p = x,
                                    // so auto = int&. By reference collapsing rules int& && becomes
                                    // int&.
                    lref& y = x;    // int&  &   by reference collapsing becomes int&.
                    lref&& y = x;   // int&  &&  by reference collapsing becomes int&.
                    rref& y = x;    // int&& &   by reference collapsing becomes int&.
                    rref&& z = z;   // int&& &&  by reference collapsing becomes int&&.

        ============================================================================================
        Universal Reference(auto&& name = expression)
            If rhs is L val. exp then, auto = T&.
            If rhs is R val. exp then, auto = T.
                e.g.
                int x = 10;
                    auto&& r1 = x;          // Here compiler reads this line as if it was
                                            // int&  r1 = x, so auto = int&
                    auto&& r2 = 10;         // Here compiler reads this line as if it was
                                            // int&& r2 = 10, so auto = int

        ###REMARK###
            auto keyword can be used in comma seprated list declarations but deduction for auto for
            all the variables must be the same.
                e.g.
                    auto x = 10, y = 5;         // Here compiler reads this line as if it was
                                                // int x = 10, y = 5.

                BUT
                    auto x = 10., y = 5;    // This is a syntax error because auto for x is
                                            // double but for y it's int.

                BUT
                    int a = 5;
                    auto* x = &a, y = a;    // This is legal because for both variables auto is
                                            // deduced to int.
        ###REMARK###
====================================================================================================
