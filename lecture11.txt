=============================================LECTURE 11=============================================
====================================================================================================

====================================================================================================
Const Member Functions(continued)
    mutable Keyword
        class MyClass
        {
        public:
            void print()const
            {
                //..
                _debug++;   // Since print is a const member func, it cannot change the value of
                            // _debug. To get around that we define _debug as mutable int _debug.
                            // This let's const member funcs to change the values of the instance.
                            // This also let's us change those values by using "." (dot operator).
            }
        private:
            int _dd, _mm, _yy;
            mutable int _debug;
        }; // class MyClass
        int main()
        {
            MyClass const m;
            m._debug = 5;   // Because _debug is mutable, this assignment is not a syntax error even
                            // though m is const.
            return 0;
        }
    ###REMARK###
        Non-static data members of a class may not be directly related to the observable state of
        the instance.
    ###REMARK###

====================================================================================================
Constructor(ctor) and Destructor(dtor)
    Constructors
        - Their names must be the same with the class name.
        - They do not have a return type.
        - They are non-static member functions of the class, meaning they can and do use
            "this pointer".
        - Cannot be a static member function.
        - Cannot be a const  member function.
        - Cannot be a global function.
        - Can be overloaded.
        - Does not have to be a public member function of the class, can be private or protected.
        - "Dot operator" or "arrow operator" cannot be used to call a constructor.

    Destructors
        - Their names must be the same with the class name, but with one addition "~".
        - They do not have a return type.
        - They are non-static member functions of the class, meaning they can and do use
            "this pointer".
        - Cannot be a static member function.
        - Cannot be a const  member function.
        - Cannot be a global function.
        - Cannot be overloaded.
        - Cannot have a parameter.
        - Does not have to be a public member function of the class, can be private or protected.
        - "Dot operator" or "arrow operator" can be used to call a destructor but must be very
            careful when doing so.

    Default Constructor
        For a ctor to be a default ctor, either it must not have any parameters,
        or every parameter of that ctor must have default values.

====================================================================================================
Special Member Functions
    Definitions of these functions can be written by the compiler under certain
    circumstances(defaulting).
        Can happen in two different ways;
            1-) According to the language's rules, it can (implicitly)declare these functions and
                can define them.
            2-) We can declare them and expect compiler to write their code.

    There are 6 special members functions;
        - Default ctor
        - Destructor
        - Copy Ctor
        - Move Ctor             (added with C++11)
        - Copy Assignment
        - Move Assignment       (added with C++11)

        Copy Members
            - Copy Ctor
            - Copy Assignment

        Move Members
            - Move Ctor
            - Move Assignment
###REMARK###
    - Global objects are constructed before the main function and destroyed after the main function.
        If the number of global objects is  more than one, then they are constructed by their 
        declaration order. The first object to be constructed is the last object to be destroyed.
    - Order of construction of global object instances from different source files is compiler
        dependent.
    - Static local class instances will not be constructed if the function is not called. Therefore
        will not be destroyed either. They will be constructed when the function is called and will
        be destroyed after the main ends.
        ###REMARK### about static local object instances
            Only the first call to that function will result with instance creation, following calls
            will not create it again.
        ###REMARK###
    - Non-static local variables are constructed when their scope begins, and are destroyed at the
        end of their scope.
    - Initializing a reference to an object instance does not call the constructor.
        e.g.
            class Yasin
            {
                Yasin();
                ~Yasin();
            }
            int main()
            {
                Yasin x;                // Will     call the constructor.
                Yasin& r1_x = x;        // Will not call the constructor.
                Yasin& r2_x = x;        // Will not call the constructor.
                Yasin& r3_x = x;        // Will not call the constructor.
                return 0;
            }
###REMARK###

Construction of the elements of a class array is ordered by the array order.
First element will be constructed first but destroyed last, and last element will be constructed
last but destroyed first.

###REMARK###
    Yasin x1;                       // Default initialization. Will call the default ctor.
    Yasin x2{};                     // Value   initialization. Will call the default ctor.
    Yasin x3();                     // Function declaration, not a class object instantiation.
        e.g. initialization
            class MyClass
            {
            public:
                MyClass(int x)
                {
                    std::cout << "MyClass(int x) x = " << x << '\n;
                }
            }; // class MyClass
            int main()
            {
                MyClass x1(10);     // Direct initialization.
                MyClass x2{ 10 };   // Direct list(brace) initialization.
                MyClass x3 = 92;    // Copy initialization.
                return 0;
            }
###REMARK###

###REMARK###
    A class does not have to have a default constructor.
###REMARK###

###REMARK###
    Automatic storage duration objects are located in stack.

    Static storage duration objects

    Dynamic storage duration objects are located in free store(in C free store is called heap).
###REMARK###

###REMARK###
    new operator and operator new function are different from each other. new operator is used to
    create dynamic objects. operator new function is the C++ counterpart of malloc() function in C.
    operator new() and malloc() functions allocate a space in the memmory and return the address
    with one difference, if malloc() fails to allocate the space it returns NULL, if operator new()
    fails to allocate the space it throws an exception.

    What new operator does?
        new operator uses operator new function to allocate a space on the memmory and then type
        casts the returned value from operator new function, and calls the ctor of that class.
            e.g.
                MyClass* m1 = new MyClass;
                // This line actually does the following
                static_cast<MyClass*>(operator new(sizeof(MyClass)))->MyClass();
                ###REMARK###
                    Ctors cannot be called by using . or -> operators. This demonstration is written
                    like this to explain what compiler does. This code would be invalid if it were
                    to be written by a developer.
                ###REMARK###
    How to delete a dynamic object?
        delete operator takes the address of an instance and calls the destructor.
        delete operator and operator delete function are different from each other.
        operator delete function is the C++ counterpart of free() function in C.
            e.g.
                delete m1;
                // This line actually does the following
                m1->~MyClass();
                operator delete(m1);

    This ###REMARK### section is just a small peak at the dynamic instances.
###REMARK###

###REMARK###
    Special member functions can have one of the following states;
        1-) Not  Declared
        2-) User Declared
                2.1-) User Declared - Defined
                2.2-) User Declared - Defaulted
                2.3-) User Declared - Deleted
        3-) Implicitly Declared                    // Defined by the compiler.
                3.1-) Implicitly Declared - Defaulted
                3.2-) Implicitly Declared - Deleted
###REMARK###

====================================================================================================
Ctor Initializer List(Member Initializer List)
    1-) Can only be used for ctors.
    2-) A ctor initializes the non-static data members of the instance it's going to construct.
    3-) Construction order of data members of a class, is always in the order of definition in the
        class.
    4-) Even if the ctor does not do anything in it's block, the block must exist.

    e.g.
        class MyClass
        {
        public:
            MyClass() : _x{ 5 }, _y{ 6 }, _z(7)        // This here is the ctor initializer list.
            {
                //..
            }
        private:
            int _x, _y, _z;
        }; // class MyClass
        ###REMARK###
            If there are members that are initialized in the Initializer List and some members that
            are not initilized then those members will be default initialized. This may cause syntax
            errors in some scenarios(e.g. const data members, reference data members, ...).
                e.g.
                    class MyClass
                    {
                    public:
                        MyClass() : _x{ 10 } {}     // Because _x is initialized with a value but _y
                                                    // is not, _y will be default initialized.
                    private:
                        int _x, _y;
                    }; // class MyClass
        ###REMARK###

    ###REMARK###
        Using Initializer List and assigning the values inside of the ctor is different.
        Initializer List initializes the members, but assigning their values inside the ctor is
        initializing them with default values and then assigning the values to them.
        That's why first choice must always be the ctor initializer list.
    ###REMARK###

    ###REMARK###
        Data members of a class will always be initialized in the declaration order.
        Initializer List order does not effect the member initialization order.
    ###REMARK###

====================================================================================================
Default Member Initializer(In-Class Initializer) ==> Not Actually an Initializer
    e.g.
        class MyClass
        {
        public:
            MyClass() : _y{ 10 } {}     // _x is not initialized here but since it has a Default
                                        // Member Initializer. It will be initialized with 20.
        private:
            int _x { 20 };              // Default Member Initializer. Could also be used with "="
                                        // e.g. int _x = 20. But () cannot be used.
            int _y;
        }

    ###REMARK###
        Constructor Initializer List overrides the Default Member Initializer.
    ###REMARK###
====================================================================================================
