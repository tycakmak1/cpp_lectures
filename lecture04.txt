=============================================LECTURE 04=============================================
====================================================================================================

====================================================================================================
Type Conversion
    Implicit Type Conversion
        x + y
        
        If ranks are different but signs are same, operations will be performed on higher rank.
        If ranks and signs are both different, operation will be performed on higher unsigned rank.
            e.g.
                unsigned long
                int
                    Operation will be performed on unsigned long.
            for the opposite scenario
                e.g.
                    long
                    unsigned int
                        If the higher rank can store all the values in lower unsigned rank,
                        then operation will be performed on the higher rank
                        else it will be performed on unsigned higher rank.
        If ranks are the same but one of them is signed and the other one is unsigned, operation
        will be performed on unsigned.
            e.g.
                unsigned long
                long
                    Operation will be performed on unsigned long.

====================================================================================================
Control Statements
    if
    for
    while
    do-while
    switch
    goto
    return
    break
    continue

====================================================================================================
Maximal Munch
    Compiler tries to produce longest tokens.
        e.g.
            x+++y would mean x++ + y because,
                x is an identifier, x+ is meaningless so x is the first token
                + is an operator, ++ is an operator, +++ is meaningless so second token is ++
                + is an operator, +y is meaningless so + is third token\
                y is an identifier and is the fourth token

                so x+++y become x++ + y
###REMARK###
    After declaration of an array, a[5] and int 5[a] are the same thing, because [] is a pointer
    operator. The [] operator sums the left operand and the operand between [] and deferences the
    sum.
            e.g.
                a[5] ==> *(a + 5)
                5[a] ==> *(5 + a)
            e.g.
                auto x = 2["coders"] - 3["coders"];     // Here x will be an int and it will have
                                                        // the value of 1.
###REMARK###

====================================================================================================
Pointer
    ================================================================================================
    Object Pointers        -> Address of objects, variables.
        T x;
            T* is the type of address of T data type.
            e.g.
                int*
                double*
            Pointers can be L value or R value.
                (pointer variable name can be used for L value type pointer)
                int* p;        // pointer to int or p points to 'insert variable name here'
                Every pointer no matter the data type it points to, has the same size,
                    but function pointer and object pointer does not have to have the same size.
                int* x, y;    // here x is a pointer but y is int
            ###REMARK###
                A pointer can be valid or invalid. Validity does not relate to syntax.
                    e.g. Invalid Pointer
                        int* ptr;               // Is an INVALID pointer because it has
                                                // garbage(indetermined) value.
                        If the object that the pointer points to is dead, than the pointer is
                        invalid.
                        ###REMARK###
                            int* p = nullptr;   // Is a VALID pointer
                        ###REMARK###
                    e.g. Valid Pointer
                        the end of an array
                            e.g.
                                int a[5] = {0};
                                int* p = &a[5];
                    e.g.
                        #include <stdio.h>

                        int main(void)
                        {
                            int* p;
                            p;                  // Here p is a wild pointer.
                            if(true)
                            {
                                int x = 10;
                                p = &x;
                                p;              // here p is a VALID pointer.
                            }
                            p;                  // Here p is a dangling pointer. Dangling pointers
                                                // are INVALID pointers.
                        }
            ###REMARK###
        Pointer Operators
            & Address of
                - It's operand has to be an L value expr
                - &x is an R value expr
            * Dereferencing / Indirection
                - Yields the value of the object that the pointer points to

###REMARK###
    Pointer returning functions must never return the adress of automatic local variables.
    They can return;
        1-) The address of global variable.
        2-) The address of static local variable.
        3-) The address of a string literal.
        4-) The address of a dynamic variable.
        5-) The address of a parameter, iff the parameter is the object itself.
###REMARK###

Function pointer returns the address of a function.

====================================================================================================
Important Topics Related to Pointers
    - Functions with pointer parameters
    - Pointers and const keyword
    - Address returning functions
    - String literals

    - Type alias declarations(typedef declarations)

    - Pointer Arithmetic
    - Pointer Arrays
    - Pointer to Pointer
    - Void Pointers
        - void* and void** difference
    - Function Pointers
        - Function Pointer Arrays
        - Functions Returning Function Pointers
        - Call Back
    - Multi-Dimensional Arrays
        - Functions Taking Multi-Dimensional Arrays as Parameter
    - Dynamic Memory Management

    - Array Decay / Function to Pointer Conversion
====================================================================================================
